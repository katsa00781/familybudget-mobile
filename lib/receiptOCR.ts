import * as FileSystem from 'expo-file-system';

// T√≠pusok
export interface ReceiptItem {
  id: string;
  name: string;
  quantity: number;
  unit: string;
  price: number;
  category: string;
  checked: boolean;
}

export interface ReceiptData {
  items: ReceiptItem[];
  total: number;
  date?: string;
  store?: string;
}

// OpenAI GPT-4 Vision API t√≠pusok
interface OpenAIMessage {
  role: 'user' | 'assistant' | 'system';
  content: Array<{
    type: 'text' | 'image_url';
    text?: string;
    image_url?: {
      url: string;
      detail?: 'low' | 'high' | 'auto';
    };
  }> | string;
}

interface OpenAIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

// üéØ F≈ë feldolgoz√≥ f√ºggv√©ny - CSAK GPT-4 Vision
export const processReceiptImage = async (imageUri: string): Promise<ReceiptData> => {
  console.log('üöÄ GPT-4 Vision receipt feldolgoz√°s ind√≠t√°sa...');
  
  // GPT-4 Vision (egyetlen API)
  try {
    const gptResult = await processWithGPT4Vision(imageUri);
    if (gptResult.items.length > 0) {
      console.log('‚úÖ GPT-4 Vision sikeres feldolgoz√°s:', gptResult.items.length, 'term√©k');
      return gptResult;
    } else {
      console.warn('‚ö†Ô∏è GPT-4 Vision nem tal√°lt term√©keket');
      return generateMockData();
    }
  } catch (error) {
    console.error('‚ùå GPT-4 Vision hiba:', error);
    console.log('üìù Fallback mock adatok haszn√°lata');
    return generateMockData();
  }
};

// üß† GPT-4 Vision feldolgoz√°s - EGYETLEN API
const processWithGPT4Vision = async (imageUri: string): Promise<ReceiptData> => {
  const apiKey = process.env.EXPO_PUBLIC_OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('OpenAI API kulcs hi√°nyzik');
  }

  console.log('üß† GPT-4 Vision API h√≠v√°s magyar nyugta elemz√©shez...');

  // K√©p base64 konvert√°l√°sa
  const base64Image = await FileSystem.readAsStringAsync(imageUri, {
    encoding: FileSystem.EncodingType.Base64,
  });

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini', // Gazdas√°gos verzi√≥
      messages: [
        {
          role: 'system',
          content: `Te egy magyar nyugta OCR szak√©rt≈ë vagy, aki magyar √°ruh√°zl√°ncok (TESCO, ALDI, LIDL, SPAR, CBA, COOP, PENNY, AUCHAN) nyugt√°it elemzi.

FELADATOD: Elemezd a nyugtak√©pet √©s adj vissza pontos JSON adatokat.

V√ÅLASZ FORM√ÅTUM (k√∂telez≈ë JSON):
{
  "items": [
    {
      "name": "TERM√âK N√âV",
      "quantity": 1,
      "unit": "db", 
      "price": 450,
      "category": "Kateg√≥ria"
    }
  ],
  "total": 450,
  "store": "√úZLET N√âV",
  "date": "2025.07.25"
}

üá≠üá∫ MAGYAR OCR HIBAJAV√çT√ÅSOK (KRITIKUS):
‚Ä¢ 0 ‚Üí O: "TEJF0L" ‚Üí "TEJF√ñL", "J0GHURT" ‚Üí "JOGHURT"
‚Ä¢ 1 ‚Üí I: "K1NY√âR" ‚Üí "KENY√âR", "CS1RKE" ‚Üí "CSIRKE"  
‚Ä¢ 3 ‚Üí E: "K3NY√âR" ‚Üí "KENY√âR", "T3J" ‚Üí "TEJ"
‚Ä¢ 4 ‚Üí A: "P4RADICSOM" ‚Üí "PARADICSOM", "H4GYMA" ‚Üí "HAGYMA"
‚Ä¢ 5 ‚Üí S: "5ONKA" ‚Üí "SONKA", "5PAR" ‚Üí "SPAR"
‚Ä¢ 6 ‚Üí G: "JO6HURT" ‚Üí "JOGHURT"
‚Ä¢ 8 ‚Üí B: "KOL8√ÅSZ" ‚Üí "KOLB√ÅSZ", "C8A" ‚Üí "CBA"

üì¶ MAGYAR TERM√âK KATEG√ìRI√ÅK:
‚Ä¢ Tejterm√©kek: tej, sajt, t√∫r√≥, joghurt, vaj, tejf√∂l, tejsz√≠n, kefir, mascarpone
‚Ä¢ P√©k√°ruk: keny√©r, kifli, zsemle, kal√°cs, bri√≥s, bagett, croissant, r√©tes
‚Ä¢ H√∫s √©s hal: h√∫s, csirke, sert√©s, marha, sonka, szal√°mi, kolb√°sz, virsli, hal
‚Ä¢ Z√∂lds√©g √©s gy√ºm√∂lcs: alma, ban√°n, narancs, paradicsom, hagyma, krumpli, r√©pa, sal√°ta
‚Ä¢ √âdess√©gek: csokol√°d√©, cukor, m√©z, bonbon, keksz, s√ºtem√©ny, torta
‚Ä¢ Italok: v√≠z, √ºd√≠t≈ë, tea, k√°v√©, s√∂r, bor, juice, √°sv√°nyv√≠z
‚Ä¢ H√°ztart√°s: mos√≥szer, tiszt√≠t√≥szer, wc pap√≠r, mosogat√≥szer, szappan, sampon

üí∞ √ÅR SZAB√ÅLYOK:
- Eredeti forint √©rt√©k: 450 Ft = 450, 199 Ft = 199
- Tizedesjegyek: 399,90 Ft = 399 (eg√©szre kerek√≠tve)
- NE szorozzuk meg semmivel az √°rat!

üìè M√âRT√âKEGYS√âGEK:
- kg, g, dkg (t√∂meg)
- l, dl, ml (≈±rm√©rt√©k)  
- db, csomag, doboz, √ºveg, sz√°l (darabsz√°m)

üè™ √úZLETL√ÅNCOK FELISMER√âSE:
- TESCO, ALDI, LIDL, SPAR, CBA, COOP, PENNY, AUCHAN, INTERSPAR, MATCH

‚ö†Ô∏è FONTOS:
- NE tal√°lj ki term√©keket!
- Csak a nyugt√°n l√°that√≥ t√©teleket dolgozd fel
- Ha bizonytalan vagy, hagyd ki az adott t√©telt
- D√°tum form√°tum: √â√â√â√â.HH.NN (2025.07.25)
- CSAK tiszta JSON v√°laszt adj, semmi m√°st!`
        },
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: `üá≠üá∫ MAGYAR NYUGTA ELEMZ√âS

Elemezd alaposan ezt a magyar √°ruh√°zi nyugt√°t √©s dolgozd fel JSON form√°tumba!

üîç AMIT KERESS:
1. TERM√âKNEVEK - Jav√≠tsd az OCR hib√°kat (0‚ÜíO, 1‚ÜíI, 3‚ÜíE, 4‚ÜíA, 5‚ÜíS, 8‚ÜíB)
2. √ÅRAK - EREDETI forint √©rt√©k (pl. 450 Ft = 450, NE szorozzuk meg!)
3. MENNYIS√âGEK - kg, g, db, l, csomag, doboz
4. √úZLET N√âV - TESCO, ALDI, LIDL, SPAR, CBA, stb.
5. D√ÅTUM - √â√â√â√â.HH.NN form√°tum
6. KATEG√ìRI√ÅK - 8 magyar kateg√≥ria k√∂z√ºl v√°lassz

‚ö†Ô∏è FONTOS: 
- Csak a nyugt√°n L√ÅTHAT√ì term√©keket dolgozd fel
- NE tal√°lj ki semmit
- OCR hib√°kat JAV√çTSD (TEJF0L‚ÜíTEJF√ñL)
- √Årak eredeti forint √©rt√©kben!

V√°laszolj CSAK JSON-nal:`
            },
            {
              type: 'image_url',
              image_url: {
                url: `data:image/jpeg;base64,${base64Image}`,
                detail: 'high' // Nagy pontoss√°g
              }
            }
          ]
        }
      ],
      max_tokens: 2000,
      temperature: 0.1 // Konzisztens eredm√©nyek√©rt
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`OpenAI API hiba: ${response.status} ${response.statusText} - ${errorText}`);
  }

  const data: OpenAIResponse = await response.json();
  
  if (!data.choices || data.choices.length === 0) {
    throw new Error('OpenAI API nem adott vissza v√°laszt');
  }

  const content = data.choices[0].message.content;
  console.log('üß† GPT-4 Vision v√°lasz:', content);

  // JSON parse √©s valid√°ci√≥
  try {
    const jsonStart = content.indexOf('{');
    const jsonEnd = content.lastIndexOf('}') + 1;
    
    if (jsonStart === -1 || jsonEnd === 0) {
      throw new Error('Nem tal√°lhat√≥ JSON a v√°laszban');
    }
    
    const jsonStr = content.substring(jsonStart, jsonEnd);
    const parsedData = JSON.parse(jsonStr);
    
    // Adatok valid√°l√°sa √©s jav√≠t√°sa
    const items: ReceiptItem[] = (parsedData.items || []).map((item: any, index: number) => ({
      id: `gpt4_${index}_${Date.now()}`,
      name: postProcessProductName(item.name || 'Ismeretlen term√©k'),
      quantity: Math.max(item.quantity || 1, 1),
      unit: validateUnit(item.unit) || 'db',
      price: Math.max(item.price || 0, 1), // Min 1 Ft
      category: validateCategory(item.category) || 'Egy√©b',
      checked: false
    }));

    if (items.length === 0) {
      throw new Error('Nincs feldolgozhat√≥ term√©k');
    }

    const result: ReceiptData = {
      items,
      total: parsedData.total || items.reduce((sum, item) => sum + (item.price * item.quantity), 0),
      date: parsedData.date || new Date().toLocaleDateString('hu-HU'),
      store: parsedData.store || 'Ismeretlen √ºzlet'
    };

    console.log(`‚úÖ GPT-4 Vision parsing: ${result.items.length} term√©k, ${result.total} Ft √∂sszesen`);
    return result;
    
  } catch (parseError) {
    console.error('‚ùå GPT-4 Vision JSON parse hiba:', parseError);
    console.log('‚ùå Eredeti v√°lasz:', content);
    throw new Error('GPT-4 Vision v√°lasz feldolgoz√°si hiba: ' + parseError);
  }
};

// ÔøΩ Intelligens ut√≥feldolgoz√≥ f√ºggv√©nyek a m√©g jobb pontoss√°g√©rt
const postProcessProductName = (name: string): string => {
  if (!name || name.length < 2) return 'Ismeretlen term√©k';
  
  let processed = name.trim().toUpperCase();
  
  // Tov√°bbi OCR hib√°k jav√≠t√°sa, amiket a GPT esetleg kihagyott
  const extraFixes: { [key: string]: string } = {
    // Gyakori hib√°k m√©g egyszer
    'TEJF0L': 'TEJF√ñL', 'TEJFOL': 'TEJF√ñL', 'TEJF8L': 'TEJF√ñL',
    'K1NY√âR': 'KENY√âR', 'KENY√âR': 'KENY√âR', 'K3NY√âR': 'KENY√âR',
    'J0GHURT': 'JOGHURT', 'J√ìGHURT': 'JOGHURT', 'J8GHURT': 'JOGHURT',
    'CS1RKE': 'CSIRKE', 'CSIRK3': 'CSIRKE', 'CS1RK3': 'CSIRKE',
    'H4GYMA': 'HAGYMA', 'HAGYM4': 'HAGYMA', 'H4GYM4': 'HAGYMA',
    'P4RADICSOM': 'PARADICSOM', 'PARADICSOM': 'PARADICSOM',
    '5ONKA': 'SONKA', 'S0NKA': 'SONKA', '50NKA': 'SONKA',
    'KOL8√ÅSZ': 'KOLB√ÅSZ', 'KOLB4SZ': 'KOLB√ÅSZ', 'KOL8ASZ': 'KOLB√ÅSZ',
    'T3J': 'TEJ', 'T1J': 'TEJ', 'TE1': 'TEJ',
    'V4J': 'VAJ', 'VA1': 'VAJ', 'V41': 'VAJ',
    'TO1√ÅS': 'TOJ√ÅS', 'T0J√ÅS': 'TOJ√ÅS', 'TOJAS': 'TOJ√ÅS',
    '4LMA': 'ALMA', 'ALM4': 'ALMA', '4LM4': 'ALMA',
    'B4N√ÅN': 'BAN√ÅN', 'BAN4N': 'BAN√ÅN', 'B4N4N': 'BAN√ÅN',
    'N4RANCS': 'NARANCS', 'NARANC5': 'NARANCS', 'N4RANC5': 'NARANCS',
    'U80RKA': 'UBORKA', 'UB0RKA': 'UBORKA', 'U8ORKA': 'UBORKA',
    'R3PA': 'R√âPA', 'REP4': 'R√âPA', 'R3P4': 'R√âPA',
    'SZ4L√ÅMI': 'SZAL√ÅMI', 'SZALAM1': 'SZAL√ÅMI', 'SZ4L4MI': 'SZAL√ÅMI',
    
    // √úzletnevek jav√≠t√°sa
    'TESK0': 'TESCO', 'TES6O': 'TESCO', 'T3SCO': 'TESCO',
    '4LDI': 'ALDI', 'ALD1': 'ALDI', 'A1DI': 'ALDI',
    'L1DL': 'LIDL', 'LID1': 'LIDL', 'L1D1': 'LIDL',
    '5PAR': 'SPAR', 'SP4R': 'SPAR', '5P4R': 'SPAR',
    'C8A': 'CBA', 'CB4': 'CBA', '68A': 'CBA',
    'CO0P': 'COOP', 'C00P': 'COOP', 'C0OP': 'COOP'
  };
  
  // Alkalmaz√°s
  Object.entries(extraFixes).forEach(([wrong, correct]) => {
    processed = processed.replace(new RegExp(wrong, 'g'), correct);
  });
  
  // Felesleges karakterek √©s szavak elt√°vol√≠t√°sa
  processed = processed
    .replace(/\b(AKCI√ì|AKCI√ìS|KEDVEZM√âNY|LE√ÅRAZ|SALE|OFFER)\b/gi, '')
    .replace(/\d+\s*(KG|G|DKG|L|DL|ML|DB|CSOMAG|DOBOZ|√úVEG|SZ√ÅL)\b/gi, '')
    .replace(/[^A-Z√Å√â√ç√ì√ñ≈ê√ö√ú≈∞0-9\s]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
    
  console.log(`üîß Term√©k ut√≥feldolgoz√°s: "${name}" ‚Üí "${processed}"`);
  return processed;
};

const validateUnit = (unit: string): string | null => {
  if (!unit) return null;
  
  const validUnits = ['kg', 'g', 'dkg', 'l', 'dl', 'ml', 'db', 'csomag', 'doboz', '√ºveg', 'sz√°l', 'szelet'];
  const unitLower = unit.toLowerCase().trim();
  
  // K√∂zvetlen egyez√©s
  if (validUnits.includes(unitLower)) {
    return unitLower;
  }
  
  // Fuzzy match gyakori hib√°kra
  const unitFixes: { [key: string]: string } = {
    'darab': 'db', 'drb': 'db', 'kom': 'db',
    'kilogram': 'kg', 'kilo': 'kg', 'gramm': 'g', 'dekagramm': 'dkg',
    'liter': 'l', 'deciliter': 'dl', 'milliliter': 'ml',
    'csom': 'csomag', 'pak': 'csomag', 'pack': 'csomag',
    'dob': 'doboz', 'box': 'doboz', 'tekercs': 'tk'
  };
  
  return unitFixes[unitLower] || null;
};

const validateCategory = (category: string): string | null => {
  if (!category) return null;
  
  const validCategories = [
    'Tejterm√©kek', 'P√©k√°ruk', 'H√∫s √©s hal', 'Z√∂lds√©g √©s gy√ºm√∂lcs',
    '√âdess√©gek', 'Italok', 'H√°ztart√°s', 'Egy√©b'
  ];
  
  // K√∂zvetlen egyez√©s
  if (validCategories.includes(category)) {
    return category;
  }
  
  // Fuzzy match gyakori vari√°ci√≥kra
  const categoryLower = category.toLowerCase();
  
  if (['tej', 'dairy', 'tejterm√©k'].some(k => categoryLower.includes(k))) return 'Tejterm√©kek';
  if (['p√©k', 'bread', 'keny√©r'].some(k => categoryLower.includes(k))) return 'P√©k√°ruk';
  if (['h√∫s', 'meat', 'hal', 'fish'].some(k => categoryLower.includes(k))) return 'H√∫s √©s hal';
  if (['z√∂lds√©g', 'gy√ºm√∂lcs', 'vegetable', 'fruit'].some(k => categoryLower.includes(k))) return 'Z√∂lds√©g √©s gy√ºm√∂lcs';
  if (['√©dess√©g', 'sweet', 'candy'].some(k => categoryLower.includes(k))) return '√âdess√©gek';
  if (['ital', 'drink', 'beverage'].some(k => categoryLower.includes(k))) return 'Italok';
  if (['h√°ztart√°s', 'household', 'cleaning'].some(k => categoryLower.includes(k))) return 'H√°ztart√°s';
  
  return 'Egy√©b';
};

// ÔøΩüìù Mock adatok gener√°l√°sa (fallback)
const generateMockData = (): ReceiptData => {
  return {
    items: [
      {
        id: 'mock_1',
        name: 'KENY√âR',
        quantity: 1,
        unit: 'db',
        price: 450, // 450 Ft
        category: 'P√©k√°ruk',
        checked: false
      },
      {
        id: 'mock_2',
        name: 'TEJ',
        quantity: 1,
        unit: 'l',
        price: 399, // 399 Ft
        category: 'Tejterm√©kek',
        checked: false
      }
    ],
    total: 849, // 849 Ft
    date: new Date().toLocaleDateString('hu-HU'),
    store: 'Teszt √úzlet'
  };
};

// üìÑ JSON export/import funkci√≥k a kompatibilit√°s√©rt
export const exportToJSON = (receiptData: ReceiptData): string => {
  return JSON.stringify(receiptData, null, 2);
};

export const importFromJSON = (jsonString: string): ReceiptData => {
  try {
    const data = JSON.parse(jsonString);
    
    // Alapvet≈ë valid√°ci√≥
    if (!data.items || !Array.isArray(data.items)) {
      throw new Error('√ârv√©nytelen JSON form√°tum: items hi√°nyzik');
    }
    
    return {
      items: data.items.map((item: any, index: number) => ({
        id: item.id || `imported_${index}_${Date.now()}`,
        name: item.name || 'Ismeretlen term√©k',
        quantity: item.quantity || 1,
        unit: item.unit || 'db',
        price: item.price || 0,
        category: item.category || 'Egy√©b',
        checked: item.checked || false
      })),
      total: data.total || 0,
      date: data.date || new Date().toLocaleDateString('hu-HU'),
      store: data.store || 'Ismeretlen √ºzlet'
    };
  } catch (error) {
    console.error('‚ùå JSON import hiba:', error);
    throw new Error('Nem siker√ºlt import√°lni a JSON adatokat');
  }
};

// Legacy kompatibilit√°s
export const processReceiptWithOCR = processReceiptImage;

// Export alap√©rtelmezett f√ºggv√©ny
export default processReceiptImage;
