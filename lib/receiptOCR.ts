import 'react-native-get-random-values';
import * as FileSystem from 'expo-file-system';

// T√≠pusok
export interface ReceiptItem {
  id: string;
  name: string;
  quantity: number;
  unit: string;
  price: number;
  category: string;
  checked: boolean;
}

export interface ReceiptData {
  items: ReceiptItem[];
  total: number;
  date?: string;
  store?: string;
}

// OpenAI GPT-4 Vision API t√≠pusok
interface OpenAIMessage {
  role: 'user' | 'assistant' | 'system';
  content: Array<{
    type: 'text' | 'image_url';
    text?: string;
    image_url?: {
      url: string;
      detail?: 'low' | 'high' | 'auto';
    };
  }> | string;
}

interface OpenAIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

// üéØ F≈ë feldolgoz√≥ f√ºggv√©ny - CSAK GPT-4 Vision
export const processReceiptImage = async (imageUri: string): Promise<ReceiptData> => {
  console.log('üöÄ GPT-4 Vision receipt feldolgoz√°s ind√≠t√°sa...');
  
  // GPT-4 Vision (egyetlen API)
  try {
    const gptResult = await processWithGPT4Vision(imageUri);
    if (gptResult.items.length > 0) {
      console.log('‚úÖ GPT-4 Vision sikeres feldolgoz√°s:', gptResult.items.length, 'term√©k');
      return gptResult;
    } else {
      console.warn('‚ö†Ô∏è GPT-4 Vision nem tal√°lt term√©keket');
      return generateMockData();
    }
  } catch (error) {
    console.error('‚ùå GPT-4 Vision hiba:', error);
    console.log('üìù Fallback mock adatok haszn√°lata');
    return generateMockData();
  }
};

// üß† GPT-4 Vision feldolgoz√°s - EGYETLEN API
const processWithGPT4Vision = async (imageUri: string): Promise<ReceiptData> => {
  const apiKey = process.env.EXPO_PUBLIC_OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('OpenAI API kulcs hi√°nyzik');
  }

  console.log('üß† GPT-4 Vision API h√≠v√°s magyar nyugta elemz√©shez...');

  // K√©p base64 konvert√°l√°sa
  const base64Image = await FileSystem.readAsStringAsync(imageUri, {
    encoding: FileSystem.EncodingType.Base64,
  });

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini', // Gazdas√°gos verzi√≥
      messages: [
        {
          role: 'system',
      content: `Magyar √°ruh√°zi blokk (pl. ALDI, LIDL, SPAR, TESCO) term√©ksorainak kinyer√©se. Feladat: minden val√≥s term√©k, √°r, egys√©g, kateg√≥ria, m√°rka, bolt neve, d√°tum kinyer√©se struktur√°lt JSON list√°ba.

Kimenet: csak JSON t√∂mb, minden term√©ksor k√ºl√∂n elem, p√©ld√°ul:
[
  {
    "name": "Tejf√∂l 20%",
    "brand": "",
    "category": "Tejterm√©kek",
    "store": "Aldi",
    "price": 399,
    "unit": "330 g"
  },
  {
    "name": "Csirkemellfil√©",
    "brand": "",
    "category": "H√∫s√°ruk",
    "store": "Aldi",
    "price": 1399,
    "unit": "500 g"
  }
]

Elv√°r√°sok:
- Csak val√≥s term√©kek, ne legyenek benne fizet√©si, visszav√°lt√°si, v√©g√∂sszeg sorok.
- A term√©kneveket jav√≠tsd emberileg olvashat√≥ra, r√∂vid√≠t√©seket fejtsd ki.
- Ha van m√°rka, k√ºl√∂n mez≈ëbe √≠rd, ha nincs, maradhat √ºresen.
- Kateg√≥ri√°k: "Tejterm√©kek", "P√©k√°ruk", "H√∫s√°ruk", "Z√∂lds√©g-Gy√ºm√∂lcs", "√âdess√©g", "Ital", "H√°ztart√°s", "Egy√©b".
- Bolt nev√©t a blokk alapj√°n add meg (pl. "Aldi").
- D√°tumot ne adj vissza, csak ha egy√©rtelm≈±en szerepel.
- Minden term√©k k√ºl√∂n sor legyen, mennyis√©g mindig 1.
- Ne adj magyar√°zatot, csak a JSON t√∂mb√∂t!`
        },
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: `üá≠üá∫ MAGYAR NYUGTA BLOKK√âRTELMEZ√âS

√ârtelmezd alaposan ezt a magyar √°ruh√°zi blokkr√≥l k√©sz√ºlt f√©nyk√©pet √©s k√©sz√≠ts struktur√°lt JSON list√°t!

üîç AMIT KERESS:
1. TERM√âKNEVEK - Jav√≠tsd emberileg √©rtelmesre (pl. "P√∂tty√∂s0%tejs√ºti" ‚Üí "P√∂tty√∂s tejdesszert")
2. M√ÅRK√ÅK - Ha felt≈±ntetett, k√ºl√∂nben null
3. √ÅRAK - Eredeti forint √©rt√©k (pl. 450 Ft = 450)
4. M√âRT√âKEGYS√âGEK - kg, g, l, dl, db stb.
5. √ÅRUH√ÅZ NEVE - TESCO, ALDI, LIDL, SPAR, CBA stb.
6. D√ÅTUM - √â√â√â√â.HH.NN form√°tum
7. KATEG√ìRI√ÅK - 8 magyar kateg√≥ria k√∂z√ºl v√°lassz

üõ†Ô∏è OCR HIBAJAV√çT√ÅSOK:
‚Ä¢ 0‚ÜíO, 1‚ÜíI, 3‚ÜíE, 4‚ÜíA, 5‚ÜíS, 6‚ÜíG, 8‚ÜíB
‚Ä¢ Karakterhib√°s neveket jav√≠tsd logikusan

‚ö†Ô∏è KIZ√ÅR√ÅSOK:
‚Ä¢ V√©g√∂sszeg, fizet√©si inf√≥, visszav√°lt√°s NE legyen a term√©klist√°ban
‚Ä¢ Csak val√≥s term√©kek
‚Ä¢ Ne tal√°lj ki semmit

V√°laszolj CSAK JSON-nal, semmi m√°s!`
            },
            {
              type: 'image_url',
              image_url: {
                url: `data:image/jpeg;base64,${base64Image}`,
                detail: 'high' // Nagy pontoss√°g
              }
            }
          ]
        }
      ],
      max_tokens: 2000,
      temperature: 0.1 // Konzisztens eredm√©nyek√©rt
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`OpenAI API hiba: ${response.status} ${response.statusText} - ${errorText}`);
  }

  const data: OpenAIResponse = await response.json();
  
  if (!data.choices || data.choices.length === 0) {
    throw new Error('OpenAI API nem adott vissza v√°laszt');
  }

  const content = data.choices[0].message.content;
  console.log('üß† GPT-4 Vision v√°lasz:', content);

  // JSON parse √©s valid√°ci√≥
  try {
    // K√∂zvetlen JSON t√∂mb vagy objektum keres√©se
    let jsonStr = '';
    // Pr√≥b√°ljuk meg a legels≈ë '['-t≈ël a legutols√≥ ']'-ig kiv√°gni a JSON t√∂mb√∂t
    const arrStart = content.indexOf('[');
    const arrEnd = content.lastIndexOf(']') + 1;
    if (arrStart !== -1 && arrEnd > arrStart) {
      jsonStr = content.substring(arrStart, arrEnd);
    } else {
      // Ha nincs t√∂mb, pr√≥b√°ljuk meg az objektumot
      const objStart = content.indexOf('{');
      const objEnd = content.lastIndexOf('}') + 1;
      if (objStart === -1 || objEnd === 0) {
        throw new Error('Nem tal√°lhat√≥ JSON a v√°laszban');
      }
      jsonStr = content.substring(objStart, objEnd);
    }
    // Tiszt√≠tsuk meg a jsonStr-t, ha a v√©g√©n van extra karakter
    jsonStr = jsonStr.trim();
    // Pr√≥b√°ljuk meg parse-olni
    let parsedData;
    try {
      parsedData = JSON.parse(jsonStr);
    } catch (e) {
      // Fallback: pr√≥b√°ljuk meg regex-szel kiv√°gni a t√∂mb√∂t
      const match = content.match(/\[.*\]/s);
      if (match) {
        try {
          parsedData = JSON.parse(match[0]);
        } catch (e2) {
          throw new Error('Nem siker√ºlt JSON t√∂mb√∂t parse-olni (regex fallback)');
        }
      } else {
        throw new Error('Nem siker√ºlt JSON t√∂mb√∂t kiv√°gni a v√°laszb√≥l');
      }
    }

    // Ha t√∂mb, akkor k√∂zvetlen√ºl feldolgozzuk
    const itemsRaw = Array.isArray(parsedData) ? parsedData : (parsedData.items || []);
    const items: ReceiptItem[] = itemsRaw.map((item: any, index: number) => ({
      id: `item_${Date.now()}_${Math.floor(Math.random() * 10000)}_${index}`,
      name: postProcessProductName(item.name || 'Ismeretlen term√©k'),
      quantity: 1, // Mennyis√©g mindig 1, minden sor k√ºl√∂n t√©tel
      unit: validateUnit(extractUnit(item.unit)) || item.unit || 'db',
      price: Math.max(item.price || 0, 1),
      category: validateCategory(item.category) || 'Egy√©b',
      checked: false
    }));

    if (items.length === 0) {
      throw new Error('Nincs feldolgozhat√≥ term√©k');
    }

    // Store name (mindig Aldi, de ha van, vegy√ºk ki az els≈ëb≈ël)
    let store = 'Ismeretlen √ºzlet';
    if (itemsRaw.length > 0 && itemsRaw[0].store_name) {
      store = itemsRaw[0].store_name;
    }

    const result: ReceiptData = {
      items,
      total: items.reduce((sum, item) => sum + (item.price * item.quantity), 0),
      date: new Date().toLocaleDateString('hu-HU'),
      store
    };

    console.log(`‚úÖ GPT-4 Vision parsing: ${result.items.length} term√©k, ${result.total} Ft √∂sszesen`);
    return result;
  } catch (parseError) {
    console.error('‚ùå GPT-4 Vision JSON parse hiba:', parseError);
    console.log('‚ùå Eredeti v√°lasz:', content);
    throw new Error('GPT-4 Vision v√°lasz feldolgoz√°si hiba: ' + parseError);
  }
};

// üß† Intelligens ut√≥feldolgoz√≥ f√ºggv√©nyek a m√©g jobb pontoss√°g√©rt
const postProcessProductName = (name: string): string => {
  if (!name || name.length < 2) return 'Ismeretlen term√©k';
  
  let processed = name.trim().toUpperCase();
  
  // Tov√°bbi OCR hib√°k jav√≠t√°sa √©s emberi √©rtelmez√©s jav√≠t√°sa
  const extraFixes: { [key: string]: string } = {
    // OCR hib√°k
    'TEJF0L': 'TEJF√ñL', 'TEJFOL': 'TEJF√ñL', 'TEJF8L': 'TEJF√ñL',
    'K1NY√âR': 'KENY√âR', 'KENY√âR': 'KENY√âR', 'K3NY√âR': 'KENY√âR',
    'J0GHURT': 'JOGHURT', 'J√ìGHURT': 'JOGHURT', 'J8GHURT': 'JOGHURT',
    'CS1RKE': 'CSIRKE', 'CSIRK3': 'CSIRKE', 'CS1RK3': 'CSIRKE',
    'H4GYMA': 'HAGYMA', 'HAGYM4': 'HAGYMA', 'H4GYM4': 'HAGYMA',
    'P4RADICSOM': 'PARADICSOM', 'PARADICSOM': 'PARADICSOM',
    '5ONKA': 'SONKA', 'S0NKA': 'SONKA', '50NKA': 'SONKA',
    'KOL8√ÅSZ': 'KOLB√ÅSZ', 'KOLB4SZ': 'KOLB√ÅSZ', 'KOL8ASZ': 'KOLB√ÅSZ',
    'T3J': 'TEJ', 'T1J': 'TEJ', 'TE1': 'TEJ',
    'V4J': 'VAJ', 'VA1': 'VAJ', 'V41': 'VAJ',
    'TO1√ÅS': 'TOJ√ÅS', 'T0J√ÅS': 'TOJ√ÅS', 'TOJAS': 'TOJ√ÅS',
    '4LMA': 'ALMA', 'ALM4': 'ALMA', '4LM4': 'ALMA',
    'B4N√ÅN': 'BAN√ÅN', 'BAN4N': 'BAN√ÅN', 'B4N4N': 'BAN√ÅN',
    'N4RANCS': 'NARANCS', 'NARANC5': 'NARANCS', 'N4RANC5': 'NARANCS',
    
    // Emberi √©rtelmez√©s jav√≠t√°sok (a prompt alapj√°n)
    'P√ñTTY√ñS0%TEJS√úTI': 'P√ñTTY√ñS TEJDESSZERT',
    'P√ñTTY√ñS0%': 'P√ñTTY√ñS TEJDESSZERT',
    'TEJS√úTI': 'TEJDESSZERT',
    'S√úTI': 'S√úTEM√âNY',
    'JOGH': 'JOGHURT',
    'KENY': 'KENY√âR',
    'ZSEM': 'ZSEMLE',
    'KIF': 'KIFLI',
    'PARAD': 'PARADICSOM',
    'HAGYOM': 'HAGYMA',
    'KRUMP': 'KRUMPLI',
    'ALM√Å': 'ALMA',
    'BAN√ÅN': 'BAN√ÅN',
    
    // √úzletnevek jav√≠t√°sa
    'TESK0': 'TESCO', 'TES6O': 'TESCO', 'T3SCO': 'TESCO',
    '4LDI': 'ALDI', 'ALD1': 'ALDI', 'A1DI': 'ALDI',
    'L1DL': 'LIDL', 'LID1': 'LIDL', 'L1D1': 'LIDL',
    '5PAR': 'SPAR', 'SP4R': 'SPAR', '5P4R': 'SPAR',
    'C8A': 'CBA', 'CB4': 'CBA', '68A': 'CBA',
    'CO0P': 'COOP', 'C00P': 'COOP', 'C0OP': 'COOP'
  };
  
  // Alkalmaz√°s
  Object.entries(extraFixes).forEach(([wrong, correct]) => {
    processed = processed.replace(new RegExp(wrong, 'g'), correct);
  });
  
  // Felesleges karakterek √©s szavak elt√°vol√≠t√°sa, de megtartjuk a m√°rk√°t
  processed = processed
    .replace(/\b(AKCI√ì|AKCI√ìS|KEDVEZM√âNY|LE√ÅRAZ|SALE|OFFER)\b/gi, '')
    .replace(/[^A-Z√Å√â√ç√ì√ñ≈ê√ö√ú≈∞0-9\s]/g, '') // Megtartjuk a sz√°mokat √©s bet≈±ket
    .replace(/\s+/g, ' ')
    .trim();
    
  console.log(`üîß Term√©k ut√≥feldolgoz√°s: "${name}" ‚Üí "${processed}"`);
  return processed;
};

const validateUnit = (unit: string): string | null => {
  if (!unit) return null;
  
  const validUnits = ['kg', 'g', 'dkg', 'l', 'dl', 'ml', 'db', 'csomag', 'doboz', '√ºveg', 'sz√°l', 'szelet'];
  const unitLower = unit.toLowerCase().trim();
  
  // K√∂zvetlen egyez√©s
  if (validUnits.includes(unitLower)) {
    return unitLower;
  }
  
  // Fuzzy match gyakori hib√°kra
  const unitFixes: { [key: string]: string } = {
    'darab': 'db', 'drb': 'db', 'kom': 'db',
    'kilogram': 'kg', 'kilo': 'kg', 'gramm': 'g', 'dekagramm': 'dkg',
    'liter': 'l', 'deciliter': 'dl', 'milliliter': 'ml',
    'csom': 'csomag', 'pak': 'csomag', 'pack': 'csomag',
    'dob': 'doboz', 'box': 'doboz', 'tekercs': 'tk'
  };
  
  return unitFixes[unitLower] || null;
};

// Parse quantity from unit string like "1.5 kg" -> 1.5
const parseQuantityFromUnit = (unitStr: string): number | null => {
  if (!unitStr) return null;
  
  const match = unitStr.match(/^(\d+(?:[.,]\d+)?)/);
  if (match) {
    return parseFloat(match[1].replace(',', '.'));
  }
  return null;
};

// Extract unit from unit string like "1.5 kg" -> "kg" 
const extractUnit = (unitStr: string): string => {
  if (!unitStr) return 'db';
  
  // Remove numbers and decimal separators, trim whitespace
  const unit = unitStr.replace(/[\d.,\s]+/g, '').trim();
  return unit || 'db';
};

const validateCategory = (category: string): string | null => {
  if (!category) return null;
  
  const validCategories = [
    'Tejterm√©kek', 'P√©k√°ruk', 'H√∫s √©s hal', 'Z√∂lds√©g √©s gy√ºm√∂lcs',
    '√âdess√©gek', 'Italok', 'H√°ztart√°s', 'Egy√©b'
  ];
  
  // K√∂zvetlen egyez√©s
  if (validCategories.includes(category)) {
    return category;
  }
  
  // Fuzzy match gyakori vari√°ci√≥kra
  const categoryLower = category.toLowerCase();
  
  if (['tej', 'dairy', 'tejterm√©k'].some(k => categoryLower.includes(k))) return 'Tejterm√©kek';
  if (['p√©k', 'bread', 'keny√©r'].some(k => categoryLower.includes(k))) return 'P√©k√°ruk';
  if (['h√∫s', 'meat', 'hal', 'fish'].some(k => categoryLower.includes(k))) return 'H√∫s √©s hal';
  if (['z√∂lds√©g', 'gy√ºm√∂lcs', 'vegetable', 'fruit'].some(k => categoryLower.includes(k))) return 'Z√∂lds√©g √©s gy√ºm√∂lcs';
  if (['√©dess√©g', 'sweet', 'candy'].some(k => categoryLower.includes(k))) return '√âdess√©gek';
  if (['ital', 'drink', 'beverage'].some(k => categoryLower.includes(k))) return 'Italok';
  if (['h√°ztart√°s', 'household', 'cleaning'].some(k => categoryLower.includes(k))) return 'H√°ztart√°s';
  
  return 'Egy√©b';
};

// ÔøΩüìù Mock adatok gener√°l√°sa (fallback)
const generateMockData = (): ReceiptData => {
  return {
    items: [
      {
        id: 'mock_1',
        name: 'KENY√âR',
        quantity: 1,
        unit: 'db',
        price: 450, // 450 Ft
        category: 'P√©k√°ruk',
        checked: false
      },
      {
        id: 'mock_2',
        name: 'TEJ',
        quantity: 1,
        unit: 'l',
        price: 399, // 399 Ft
        category: 'Tejterm√©kek',
        checked: false
      }
    ],
    total: 849, // 849 Ft
    date: new Date().toLocaleDateString('hu-HU'),
    store: 'Teszt √úzlet'
  };
};

// üìÑ JSON export/import funkci√≥k a kompatibilit√°s√©rt
export const exportToJSON = (receiptData: ReceiptData): string => {
  return JSON.stringify(receiptData, null, 2);
};

export const importFromJSON = (jsonString: string): ReceiptData => {
  try {
    const data = JSON.parse(jsonString);
    
    // Alapvet≈ë valid√°ci√≥
    if (!data.items || !Array.isArray(data.items)) {
      throw new Error('√ârv√©nytelen JSON form√°tum: items hi√°nyzik');
    }
    
    return {
      items: data.items.map((item: any, index: number) => ({
        id: item.id || `imported_${index}_${Date.now()}`,
        name: item.name || 'Ismeretlen term√©k',
        quantity: item.quantity || 1,
        unit: item.unit || 'db',
        price: item.price || 0,
        category: item.category || 'Egy√©b',
        checked: item.checked || false
      })),
      total: data.total || 0,
      date: data.date || new Date().toLocaleDateString('hu-HU'),
      store: data.store || 'Ismeretlen √ºzlet'
    };
  } catch (error) {
    console.error('‚ùå JSON import hiba:', error);
    throw new Error('Nem siker√ºlt import√°lni a JSON adatokat');
  }
};

// Legacy kompatibilit√°s
export const processReceiptWithOCR = processReceiptImage;

// Export alap√©rtelmezett f√ºggv√©ny
export default processReceiptImage;
