import * as FileSystem from 'expo-file-system';
import { Alert } from 'react-native';
import { ReceiptData as ImportedReceiptData, ReceiptItem as ImportedReceiptItem, GoogleVisionResponse } from '../types/receipt';

// Kompatibilit√°s √©rdek√©ben megtartjuk a helyi t√≠pusokat is
export interface ReceiptItem {
  id: string;
  name: string;
  quantity: number;
  unit: string;
  price: number;
  category: string;
  checked: boolean;
}

export interface ReceiptData {
  items: ReceiptItem[];
  total: number;
  date?: string;
  store?: string;
}

// Google Vision API kulcs el√©r√©se
const getGoogleVisionApiKey = (): string | null => {
  return process.env.EXPO_PUBLIC_GOOGLE_VISION_API_KEY || null;
};

// Gyakori term√©k kateg√≥ri√°k magyarul
const PRODUCT_CATEGORIES: { [key: string]: string } = {
  // Alapvet≈ë √©lelmiszerek
  'keny√©r': 'P√©k√°ruk',
  'tej': 'Tejterm√©kek',
  'sajt': 'Tejterm√©kek',
  'joghurt': 'Tejterm√©kek',
  'vaj': 'Tejterm√©kek',
  'toj√°s': 'Tejterm√©kek',
  'h√∫s': 'H√∫s √©s hal',
  'csirke': 'H√∫s √©s hal',
  'sert√©s': 'H√∫s √©s hal',
  'marha': 'H√∫s √©s hal',
  'hal': 'H√∫s √©s hal',
  'sonka': 'H√∫s √©s hal',
  'kolb√°sz': 'H√∫s √©s hal',
  'szal√°mi': 'H√∫s √©s hal',
  
  // Z√∂lds√©gek, gy√ºm√∂lcs√∂k
  'alma': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'ban√°n': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'narancs': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'citrom': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'paradicsom': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'hagyma': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'krumpli': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'burgonya': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'r√©pa': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'sal√°ta': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'paprika': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  'uborka': 'Z√∂lds√©g √©s gy√ºm√∂lcs',
  
  // Konzervek √©s bef≈ëttek
  'konzerv': 'Konzerv √©s bef≈ëtt',
  'bef≈ëtt': 'Konzerv √©s bef≈ëtt',
  'sz√≥sz': 'F≈±szer √©s √∂ntet',
  'ketchup': 'F≈±szer √©s √∂ntet',
  'majon√©z': 'F≈±szer √©s √∂ntet',
  'must√°r': 'F≈±szer √©s √∂ntet',
  
  // Italok
  'v√≠z': 'Italok',
  '√ºd√≠t≈ë': 'Italok',
  'coca': 'Italok',
  'pepsi': 'Italok',
  'fanta': 'Italok',
  'sprite': 'Italok',
  's√∂r': 'Italok',
  'bor': 'Italok',
  'k√°v√©': 'Italok',
  'tea': 'Italok',
  
  // Alapanyagok
  'liszt': 'Alapanyag',
  'cukor': 'Alapanyag',
  's√≥': 'F≈±szer √©s √∂ntet',
  'bors': 'F≈±szer √©s √∂ntet',
  'olaj': 'Alapanyag',
  'rizs': 'Alapanyag',
  't√©szta': 'Alapanyag',
  
  // Tiszt√°lkod√°s
  'sampon': 'Tiszt√°lkod√°s',
  'tusf√ºrd≈ë': 'Tiszt√°lkod√°s',
  'fogkr√©m': 'Tiszt√°lkod√°s',
  'mos√≥szer': 'H√°ztart√°s',
  '√∂bl√≠t≈ë': 'H√°ztart√°s',
  'mosogat√≥szer': 'H√°ztart√°s',
  'wc': 'H√°ztart√°s',
  'pap√≠r': 'H√°ztart√°s',
  
  // Alap√©rtelmezett
  'default': 'Egy√©b'
};

// M√©rt√©kegys√©gek lek√©pez√©se
const UNITS: { [key: string]: string } = {
  'kg': 'kg',
  'kilo': 'kg', 
  'kilogramm': 'kg',
  'g': 'g',
  'gr': 'g',
  'gramm': 'g',
  'dkg': 'dkg',
  'dekagramm': 'dkg',
  'l': 'l',
  'liter': 'l',
  'dl': 'dl',
  'deciliter': 'dl',
  'ml': 'ml',
  'milliliter': 'ml',
  'db': 'db',
  'darab': 'db',
  'drb': 'db',
  'csomag': 'csomag',
  'csom': 'csomag',
  'doboz': 'doboz',
  'dob': 'doboz',
  '√ºveg': '√ºveg',
  'tk': 'tk',
  'tekercs': 'tekercs',
  'sz√°l': 'sz√°l',
  'szelet': 'szelet'
};

// Mock implement√°ci√≥ fejleszt√©shez
export const processReceiptImage = async (imageUri: string): Promise<ReceiptData> => {
  console.log('Mock OCR feldolgoz√°s...', imageUri);
  
  // Szimul√°ljunk val√≥s receipt adatokat
  const mockReceipts = [
    {
      items: [
        {
          id: '1',
          name: 'KENY√âR FEH√âR',
          quantity: 1,
          unit: 'db',
          price: 289,
          category: 'P√©k√°ruk',
          checked: false
        },
        {
          id: '2', 
          name: 'TEJ UHT 2,8% 1L',
          quantity: 1,
          unit: 'l',
          price: 359,
          category: 'Tejterm√©kek',
          checked: false
        },
        {
          id: '3',
          name: 'BAN√ÅN',
          quantity: 0.5,
          unit: 'kg',
          price: 450,
          category: 'Z√∂lds√©g √©s gy√ºm√∂lcs',
          checked: false
        },
        {
          id: '4',
          name: 'CSIRKEMELL FIL√â',
          quantity: 0.8,
          unit: 'kg',
          price: 1200,
          category: 'H√∫s √©s hal',
          checked: false
        }
      ],
      total: 2298,
      date: new Date().toLocaleDateString('hu-HU'),
      store: 'TESCO'
    }
  ];
  
  // V√©letlenszer≈±en v√°lasztunk egy mock receipt-et
  const selectedReceipt = mockReceipts[Math.floor(Math.random() * mockReceipts.length)];
  
  console.log('Mock OCR befejezve:', selectedReceipt.items.length, 'term√©k');
  return selectedReceipt;
};

// Kateg√≥ria meghat√°roz√°sa term√©k n√©v alapj√°n
const determineCategory = (productName: string): string => {
  const lowerName = productName.toLowerCase();
  
  for (const [keyword, category] of Object.entries(PRODUCT_CATEGORIES)) {
    if (lowerName.includes(keyword)) {
      return category;
    }
  }
  
  return 'Egy√©b';
};

// Google Vision API feldolgoz√≥
export const processReceiptWithGoogleVision = async (imageUri: string): Promise<ReceiptData> => {
  const apiKey = getGoogleVisionApiKey();
  
  if (!apiKey) {
    console.warn('Google Vision API kulcs hi√°nyzik, fallback mock haszn√°lata');
    return processReceiptImage(imageUri);
  }

  try {
    console.log('Google Vision OCR feldolgoz√°s ind√≠t√°sa...');
    
    // K√©p base64 konvert√°l√°sa
    const base64Image = await FileSystem.readAsStringAsync(imageUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    // Google Vision API h√≠v√°s
    const response = await fetch(
      `https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          requests: [
            {
              image: {
                content: base64Image,
              },
              features: [
                {
                  type: 'TEXT_DETECTION',
                  maxResults: 1,
                },
                {
                  type: 'DOCUMENT_TEXT_DETECTION', 
                  maxResults: 1,
                }
              ],
            },
          ],
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`Google Vision API hiba: ${response.status} ${response.statusText}`);
    }

    const data: GoogleVisionResponse = await response.json();
    
    // Hibakezel√©s
    if (data.responses?.[0]?.error) {
      const error = data.responses[0].error;
      throw new Error(`Google Vision API hiba: ${error.message}`);
    }
    
    // Sz√∂veg kinyer√©se
    if (data.responses?.[0]?.fullTextAnnotation?.text) {
      const detectedText = data.responses[0].fullTextAnnotation.text;
      console.log('Felismert sz√∂veg:', detectedText);
      
      // Magyar receipt parsing
      return parseHungarianReceiptText(detectedText);
    } else {
      console.warn('Nem siker√ºlt sz√∂veget felismerni, fallback haszn√°lata');
      return processReceiptImage(imageUri);
    }
    
  } catch (error) {
    console.error('Google Vision OCR hiba:', error);
    
    // Fallback mock implement√°ci√≥ra
    console.warn('Google Vision hiba, fallback mock haszn√°lata');
    return processReceiptImage(imageUri);
  }
};

// Fejlett magyar receipt sz√∂veg elemz√©se √©s struktur√°l√°sa
const parseHungarianReceiptText = (text: string): ReceiptData => {
  console.log('üîç Receipt text feldolgoz√°s kezd√©se:', text.substring(0, 200) + '...');
  
  const lines = text.split(/\r?\n/).map(line => line.trim()).filter(line => line.length > 0);
  console.log('üìù √ñsszesen sorok:', lines.length);
  
  const items: ReceiptItem[] = [];
  let total = 0;
  let store = '';
  let date = '';
  
  // üè™ √úzlet n√©v keres√©se - b≈ëv√≠tett lista
  const storePatterns = [
    /TESCO|ALDI|LIDL|SPAR|CBA|COOP|PENNY|AUCHAN|INTERSPAR|MATCH|RE√ÅL/i,
    /ROSSMANN|DM|M√úLLER|BUDAPEST BANK|OTP|ERSTE/i
  ];
  
  for (let i = 0; i < Math.min(5, lines.length); i++) {
    const line = lines[i];
    for (const pattern of storePatterns) {
      if (pattern.test(line)) {
        store = line;
        console.log('üè™ √úzlet megtal√°lva:', store);
        break;
      }
    }
    if (store) break;
  }
  
  // üìÖ D√°tum keres√©se - t√∂bbf√©le form√°tum
  const datePatterns = [
    /(\d{4}\.\d{2}\.\d{2})/,                    // 2025.07.25
    /(\d{2}\.\d{2}\.\d{4})/,                    // 25.07.2025
    /(\d{4}-\d{2}-\d{2})/,                      // 2025-07-25
    /(\d{2}\/\d{2}\/\d{4})/,                    // 25/07/2025
    /(\d{2}\.\s*\d{2}\.\s*\d{4})/               // 25. 07. 2025
  ];
  
  for (const line of lines) {
    for (const pattern of datePatterns) {
      const dateMatch = line.match(pattern);
      if (dateMatch) {
        date = dateMatch[1].replace(/\s+/g, '');
        console.log('üìÖ D√°tum megtal√°lva:', date);
        break;
      }
    }
    if (date) break;
  }
  
  // üí∞ V√©g√∂sszeg keres√©se - fejlett regex
  const totalPatterns = [
    /(?:V√âG√ñSSZEG|√ñSSZESEN|TOTAL|FIZETEND≈ê|SUBTOTAL|√ñSSZ\.?)\s*:?\s*(\d{1,3}(?:[.,\s]\d{3})*|\d+)[,.]?(\d{1,2})?\s*(?:Ft|HUF|EUR)?/i,
    /(?:K√ÅRTY[A√Å]|K√âSZP√âNZ|BANKK√ÅRTYA)\s*:?\s*(\d{1,3}(?:[.,\s]\d{3})*|\d+)[,.]?(\d{1,2})?\s*(?:Ft|HUF)?/i,
    /(\d{1,3}(?:[.,\s]\d{3})*|\d+)[,.]?(\d{1,2})?\s*(?:Ft|HUF)\s*(?:V√âG√ñSSZEG|√ñSSZESEN|TOTAL|FIZETEND≈ê)/i
  ];
  
  for (const line of lines) {
    for (const pattern of totalPatterns) {
      const totalMatch = line.match(pattern);
      if (totalMatch) {
        let amount = totalMatch[1].replace(/[.,\s]/g, '');
        if (totalMatch[2]) {
          // Ha van tizedesjegy r√©sz
          amount = amount + totalMatch[2];
        }
        total = parseInt(amount);
        console.log('üí∞ V√©g√∂sszeg megtal√°lva:', total, 'Ft (soronk√©nt:', line + ')');
        break;
      }
    }
    if (total > 0) break;
  }
  
  // üõí Term√©kek keres√©se - fejlett algoritmus
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    
    // Kihagyjuk a nem relev√°ns sorokat
    if (skipLine(line)) continue;
    
    // T√∂bbf√©le term√©k-√°r pattern
    const productPatterns = [
      // Standard: "TERM√âK N√âV    123 Ft"
      /^(.+?)\s+(\d{1,3}(?:[.,\s]\d{3})*|\d+)[,.]?(\d{1,2})?\s*(?:Ft|HUF|EUR)?\s*$/i,
      // Mennyis√©gekkel: "ALMA 1kg x 450Ft    450 Ft"
      /^(.+?)\s+\d+[.,]?\d*\s*(?:kg|g|dkg|db|l|dl|ml|csomag)\s*x?\s*\d+\s*Ft?\s+(\d{1,3}(?:[.,\s]\d{3})*|\d+)\s*(?:Ft|HUF)?\s*$/i,
      // Akci√≥s: "TERM√âK    AKCI√ì 450    450 Ft"
      /^(.+?)\s+(?:AKCI√ì|AKCI[O√ì]S?|KEDVEZM[E√â]NY)\s*\d*\s*(\d{1,3}(?:[.,\s]\d{3})*|\d+)\s*(?:Ft|HUF)?\s*$/i,
      // Egyszer≈±: "TERM√âK 450"
      /^([A-Z√Å√â√ç√ì√ñ≈ê√ö√ú≈∞][A-Z√Å√â√ç√ì√ñ≈ê√ö√ú≈∞\s]{2,})\s+(\d{1,3}(?:[.,\s]\d{3})*|\d+)\s*$/i
    ];
    
    for (const pattern of productPatterns) {
      const match = line.match(pattern);
      if (match) {
        let productName = match[1].trim();
        let priceStr = match[2];
        
        // √År tiszt√≠t√°sa
        const cleanPrice = parseInt(priceStr.replace(/[.,\s]/g, ''));
        
        // Term√©k n√©v tiszt√≠t√°sa
        productName = cleanProductName(productName);
        
        // Valid√°ci√≥: elfogadhat√≥ term√©k n√©v √©s √°r
        if (isValidProduct(productName, cleanPrice)) {
          const item: ReceiptItem = {
            id: Math.random().toString(36).substr(2, 9),
            name: productName,
            quantity: extractQuantity(line),
            unit: extractUnit(line),
            price: cleanPrice,
            category: determineCategory(productName),
            checked: false
          };
          
          items.push(item);
          console.log('üõí Term√©k hozz√°adva:', productName, '-', cleanPrice, 'Ft');
        }
        break;
      }
    }
  }
  
  // Ha nem tal√°ltunk v√©g√∂sszeget, sz√°moljuk ki a t√©telekb≈ël
  if (total === 0 && items.length > 0) {
    total = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    console.log('üí∞ V√©g√∂sszeg sz√°m√≠tva t√©telekb≈ël:', total, 'Ft');
  }
  
  console.log('‚úÖ Parsing befejezve:', items.length, 'term√©k,', total, 'Ft √∂sszesen');
  
  return {
    items,
    total,
    date: date || new Date().toLocaleDateString('hu-HU'),
    store: store || 'Ismeretlen √ºzlet'
  };
};

// Seg√©dfunkci√≥k a fejlett parsinghoz
const skipLine = (line: string): boolean => {
  const skipPatterns = [
    /^[\-\=\*\+\s]*$/,                                    // Csak elv√°laszt√≥ karakterek
    /^\d{1,2}:\d{2}$/,                                    // Id≈ëform√°tum
    /^[\d\s\-\(\)]+$/,                                    // Csak sz√°mok √©s speci√°lis karakterek
    /NYUGTA|SZ√ÅMLA|INVOICE|RECEIPT/i,                     // Dokumentum t√≠pus
    /K√ñSZ√ñNJ√úK|THANK\s*YOU|VISZL√ÅT/i,                     // Z√°r√≥ sz√∂vegek
    /AD√ìSZ√ÅM|TAX\s*NUMBER|VAT/i,                          // Ad√≥inform√°ci√≥k
    /BOLTI?\s*VEZET≈ê|KASSZA|P√âNZT√ÅR/i,                    // √úzleti inform√°ci√≥k
    /^\s*[\d\-\s]{10,}\s*$/,                             // Hossz√∫ sz√°msorok (vonalk√≥d, stb.)
    /KEDVEZM√âNY.*%|DISCOUNT.*%/i,                         // Kedvezm√©ny inform√°ci√≥k √∂n√°ll√≥an
    /^\s*[A-Z]{1,3}\s*$/,                                // Nagybet≈±s r√∂vid√≠t√©sek
    /FIZET√âSI?\s*M√ìD|PAYMENT\s*METHOD/i                   // Fizet√©si m√≥d fejl√©cek
  ];
  
  return skipPatterns.some(pattern => pattern.test(line));
};

const cleanProductName = (name: string): string => {
  return name
    .replace(/^\W+|\W+$/g, '')                            // Kezd≈ë/z√°r√≥ speci√°lis karakterek
    .replace(/\s+/g, ' ')                                 // T√∂bbsz√∂r√∂s sz√≥k√∂z√∂k
    .replace(/\d+[.,]?\d*\s*(?:kg|g|dkg|db|l|dl|ml|csomag|csom|doboz|√ºveg|sz√°l|szelet)\b/gi, '') // Mennyis√©gek elt√°vol√≠t√°sa
    .replace(/\b(?:AKCI√ì|AKCI√ìS|KEDVEZM√âNY)\b/gi, '')     // Akci√≥s c√≠mk√©k elt√°vol√≠t√°sa
    .replace(/\s{2,}/g, ' ')                              // Dupla sz√≥k√∂z√∂k jav√≠t√°sa
    .trim()
    .toUpperCase();
};

const isValidProduct = (name: string, price: number): boolean => {
  // Minim√°lis n√©v hossz
  if (name.length < 3) return false;
  
  // √År valid√°ci√≥ (10 Ft - 50,000 Ft k√∂z√∂tt)
  if (price < 10 || price > 50000) return false;
  
  // Nem term√©knevek kiz√°r√°sa
  const invalidNames = [
    /^[\d\s\-\.\,\(\)]+$/,                               // Csak sz√°mok
    /√ñSSZESEN|TOTAL|SUBTOTAL|V√âG√ñSSZEG/i,               // √ñsszeg sorok
    /K√âSZP√âNZ|K√ÅRTYA|BANKK√ÅRTYA|CASH|CARD/i,            // Fizet√©si m√≥dok
    /VISSZAJ√ÅR√ì|CHANGE|V√ÅLT√ì/i,                         // Visszaj√°r√≥
    /AD√ìSZ√ÅM|TAX|VAT|√ÅFA/i,                             // Ad√≥inform√°ci√≥k
    /NYUGTA|SZ√ÅMLA|RECEIPT|INVOICE/i,                   // Dokumentum t√≠pusok
    /^[A-Z]{1,2}\d*$/,                                  // R√∂vid k√≥dok
    /D√ÅTUM|DATE|ID≈ê|TIME/i                              // D√°tum/id≈ë c√≠mk√©k
  ];
  
  return !invalidNames.some(pattern => pattern.test(name));
};

const extractQuantity = (line: string): number => {
  // Mennyis√©g keres√©se a sorban
  const quantityPatterns = [
    /(\d+[.,]?\d*)\s*(?:kg|g|dkg|l|dl|ml|db|darab|csomag|doboz|√ºveg|sz√°l|szelet)/i,
    /(\d+[.,]?\d*)\s*x/i
  ];
  
  for (const pattern of quantityPatterns) {
    const match = line.match(pattern);
    if (match) {
      return parseFloat(match[1].replace(',', '.'));
    }
  }
  
  return 1; // Alap√©rtelmezett mennyis√©g
};

const extractUnit = (line: string): string => {
  const unitPatterns = [
    /(kg|kilogram)/i,
    /(g|gramm)/i,
    /(dkg|dekagram)/i,
    /(l|liter)/i,
    /(dl|deciliter)/i,
    /(ml|milliliter)/i,
    /(db|darab)/i,
    /(csomag|csom)/i,
    /(doboz|dob)/i,
    /(√ºveg)/i,
    /(sz√°l)/i,
    /(szelet)/i
  ];
  
  for (const pattern of unitPatterns) {
    const match = line.match(pattern);
    if (match) {
      const unit = match[1].toLowerCase();
      return ['kg', 'g', 'dkg', 'l', 'dl', 'ml'].includes(unit) ? unit : 'db';
    }
  }
  
  return 'db';
};

/**
 * F≈ëfunkci√≥: automatikus OCR provider v√°laszt√°ssal
 */
export const processReceiptWithOCR = async (imageUri: string): Promise<ReceiptData> => {
  try {
    const apiKey = getGoogleVisionApiKey();
    
    if (apiKey) {
      console.log('Google Vision API haszn√°lata...');
      const result = await processReceiptWithGoogleVision(imageUri);
      
      // Ellen≈ërizz√ºk az eredm√©nyt
      if (!result || !result.items) {
        console.warn('Google Vision API hib√°s eredm√©nyt adott, fallback haszn√°lata');
        return processReceiptImage(imageUri);
      }
      
      return result;
    } else {
      console.log('Mock OCR haszn√°lata (Google Vision API kulcs hi√°nyzik)...');
      return processReceiptImage(imageUri);
    }
  } catch (error) {
    console.error('processReceiptWithOCR hiba:', error);
    
    // Fallback mindig m≈±k√∂dj√∂n
    console.log('Fallback mock OCR haszn√°lata...');
    return processReceiptImage(imageUri);
  }
};
